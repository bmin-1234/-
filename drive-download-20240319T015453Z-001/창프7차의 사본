{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1FE6TW0dlFZ1-Bpvxal8eHJ2eyo_5krm4","timestamp":1698720289175},{"file_id":"1WKbHx09IOcpCydPQu1go42FUbEdA3NBG","timestamp":1698715212771}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["def fib(n) :                          # 피보나치 수열\n","  if n == 0 or n == 1 :\n","    return 1\n","  else :\n","    return fib(n-1) + fib(n-2)"],"metadata":{"id":"ZcRhcxoztOm5","executionInfo":{"status":"ok","timestamp":1699324252004,"user_tz":-540,"elapsed":400,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["for i in range(10) :\n","  print(fib(i))"],"metadata":{"id":"LydGBb9Nnkwg","executionInfo":{"status":"ok","timestamp":1699324252579,"user_tz":-540,"elapsed":4,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["i=1\n","while i <= 10 :\n","  print(fib(i))\n","  i += 1"],"metadata":{"id":"PxVvM5n7nkyN","executionInfo":{"status":"ok","timestamp":1699324252580,"user_tz":-540,"elapsed":4,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# 중복되는 계산이 많아서 시간이 오래걸림. memorization 최적화. 공간을 쓰는 대신에 시간을 아낀다."],"metadata":{"id":"GhOPL6conk19","executionInfo":{"status":"ok","timestamp":1699324261095,"user_tz":-540,"elapsed":500,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["def fastFib(n, memo = {}) :\n","  if n == 0 or n == 1 :\n","    return 1\n","  try :                       # 시도해봐라.\n","    return memo[n]\n","  except KeyError :           # 그래도 안되면 여기서 해라.\n","    result = fastFib(n-1, memo) + fastFib(n-2, memo)\n","    memo[n] = result\n","    return result"],"metadata":{"id":"JGxpqfrhnnHy","executionInfo":{"status":"ok","timestamp":1699325320858,"user_tz":-540,"elapsed":537,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["for i in range(11) :\n","  print(fastFib(i))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lsTSAh9ZnnKB","executionInfo":{"status":"ok","timestamp":1699325334338,"user_tz":-540,"elapsed":345,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"7b774aff-1df6-45f8-e5b4-7c4ecdeeb38e"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","1\n","2\n","3\n","5\n","8\n","13\n","21\n","34\n","55\n","89\n"]}]},{"cell_type":"code","source":["dictionary = {\n","    'name' : '한양농구팀',\n","    'type' : 'BasketballTeam',\n","    'member' : ['가','나','다','라','마'],\n","    'location' : '성동구'\n","}"],"metadata":{"id":"dDTB8Gw4nnL6","executionInfo":{"status":"ok","timestamp":1699325524252,"user_tz":-540,"elapsed":619,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["print(dictionary)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zmvNQw-WncBc","executionInfo":{"status":"ok","timestamp":1699325540725,"user_tz":-540,"elapsed":455,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"5179abff-abab-4a92-8830-e6bddf50cb79"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["{'name': '한양농구팀', 'type': 'BasketballTeam', 'member': ['가', '나', '다', '라', '마'], 'location': '성동구'}\n"]}]},{"cell_type":"code","source":["print('name: ', dictionary['name'])\n","print('type: ', dictionary['type'])\n","print('member: ', dictionary['member'])\n","print('location: ', dictionary['location'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bDTdYC5DsfXR","executionInfo":{"status":"ok","timestamp":1699325642502,"user_tz":-540,"elapsed":308,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"e34f9e26-cca8-44c3-dd7a-b91b8f15942b"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["name:  한양농구팀\n","type:  BasketballTeam\n","member:  ['가', '나', '다', '라', '마']\n","location:  성동구\n"]}]},{"cell_type":"code","source":["for i in range(5) :\n","  print('member: ', dictionary['member'][i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0CxlR_fks4QD","executionInfo":{"status":"ok","timestamp":1699325743248,"user_tz":-540,"elapsed":488,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"adbb5ee5-1154-4b1f-a335-8ecb85c18d50"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["member:  가\n","member:  나\n","member:  다\n","member:  라\n","member:  마\n"]}]},{"cell_type":"code","source":["dictionary['연락처']=123456789\n","dictionary['순위']='1위'\n","print(dictionary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oWT5T3pgtQ0P","executionInfo":{"status":"ok","timestamp":1699325912493,"user_tz":-540,"elapsed":534,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"076df5e9-14f7-4308-a839-7a3ec7367b78"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["{'name': '한양농구팀', 'type': 'BasketballTeam', 'member': ['가', '나', '다', '라', '마'], 'location': '성동구', '연락처': 123456789, '순위': '1위'}\n"]}]},{"cell_type":"code","source":["del dictionary['순위']\n","print('연락처' in dictionary)\n","print('순위' in dictionary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DoKVw8Rht6F9","executionInfo":{"status":"ok","timestamp":1699325965477,"user_tz":-540,"elapsed":400,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"1e1368ae-1359-40d0-de22-074bc9d613b0"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n"]}]},{"cell_type":"code","source":["print('찾고자 하는 키를 입력하세요')\n","ans=input()\n","\n","if ans in dictionary :\n","  print(dictionary['ans'])\n","else :\n","  print('키가 존재하지 않습니다.')"],"metadata":{"id":"n_D7v73vt6I1","executionInfo":{"status":"ok","timestamp":1699325912996,"user_tz":-540,"elapsed":3,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Yh5yQlrAt6Me","executionInfo":{"status":"ok","timestamp":1699325913657,"user_tz":-540,"elapsed":7,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1e9g3y6kt6Ox","executionInfo":{"status":"ok","timestamp":1699325913658,"user_tz":-540,"elapsed":7,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"MjVtpMDnt6Qt","executionInfo":{"status":"ok","timestamp":1699325913658,"user_tz":-540,"elapsed":7,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"crKagJFDt6S5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Food(object):\n","    def __init__(self, n, v, w):  #초기화\n","        self.name = n\n","        self.value = v\n","        self.calories = w\n","    def getValue(self):   #가치를 반환할 수 있음.\n","        return self.value\n","    def getCost(self):   #비용을 반환할 수 있음.\n","        return self.calories\n","    def density(self):\n","        return self.getValue()/self.getCost()\n","    def __str__(self):\n","        return self.name + ': <' + str(self.value)\\\n","                 + ', ' + str(self.calories) + '>'"],"metadata":{"id":"gSzNgvM2ncEz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class food(object) :\n","  def __init__(self, n, v, w) :\n","    self.name=n\n","    self.value=v\n","    self.calories=w\n","  def getvalue(self) :\n","    return self.value\n","  def getcost(self) :\n","    return self.calories\n","  def density(self) :\n","    return self.getvalue()/self.getcost()\n","  def __str__(self) :\n","    return self.name + ': <' + str(self.value) + ', ' + str(self.calories) + '>'"],"metadata":{"id":"tUIA-S7RixXo","executionInfo":{"status":"ok","timestamp":1699323169731,"user_tz":-540,"elapsed":303,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["def buildMenu(names, values, calories):  #이름, 밸류, 칼로리를 전달받음.\n","    \"\"\"names, values, calories lists of same length.\n","       name a list of strings\n","       values and calories lists of numbers\n","       returns list of Foods\"\"\"\n","    menu = [] #빈리스트\n","    for i in range(len(values)):\n","        menu.append(Food(names[i], values[i],\n","                          calories[i]))\n","    return menu"],"metadata":{"id":"FkOijwuLtNYm","executionInfo":{"status":"ok","timestamp":1699323183917,"user_tz":-540,"elapsed":5,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def buildmenu(names, values, calories) :\n","  menu = []\n","  for i in range(len(values)) :\n","    menu.append(food(names[i],values[i],caloires[i]))\n","  return menu"],"metadata":{"id":"yXLK6-Mojf5I","executionInfo":{"status":"ok","timestamp":1699323275742,"user_tz":-540,"elapsed":6,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["names=['피자','햄버거','돈가스','샐러드']\n","values=[90,95,85,75]\n","calories=[320,340,360,132]\n","buildMenu(names,values,calories)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LCPJZ1hLtBjR","executionInfo":{"status":"ok","timestamp":1699323314023,"user_tz":-540,"elapsed":8,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"4e4a3dd8-d625-4521-e1e7-2c1ad18069e4"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<__main__.Food at 0x7d6093a77f10>,\n"," <__main__.Food at 0x7d6093a77dc0>,\n"," <__main__.Food at 0x7d6093a77df0>,\n"," <__main__.Food at 0x7d6093a77a90>]"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["def greedy(items, maxCost, keyFunction):#그리디 알고리즘 구현\n","    \"\"\"Assumes items a list, maxCost >= 0,\n","         keyFunction maps elements of items to numbers\"\"\"#keyFunction 물건을 숫자에 매칭시킴\n","    itemsCopy = sorted(items, key = keyFunction,     #물건을 정렬할때 쓸거임.\n","                       reverse = True)               #아마 가치를 반환할수도 있고, 가중치, density의 함수를 반환할 수도 있음.\n","    result = []                                      #하지만 중요한 것은 가장 좋은것의 정의와 독립적인 그리디 알고리즘을 만들려는 것임.\n","    totalValue, totalCost = 0.0, 0.0                 #가장 좋은 것의 정의를 구하기 위해 keyFunction 을 사용한 것임.\n","    for i in range(len(itemsCopy)):  #여기서 item대신 itemcopy를 사용했는데 복사하는것이 좋습니다.\n","        if (totalCost+itemsCopy[i].getCost()) <= maxCost:  #for 루프는 좋은것부터 나쁜 순서로 돌아가고\n","            result.append(itemsCopy[i])                  #만약 현재 값이 최대 비용보다 작으면, 즉 허락된 비용을 넘지 않으면 추가하고\n","            totalCost += itemsCopy[i].getCost()          #이를 더 추가할 수 없을때까지 반복 합니다.\n","            totalValue += itemsCopy[i].getValue()    #이렇게 하면 몇개는 건너뛸거에요. 왜냐면 다음 최적의 물건이 칼로리 예산을 초과하면\n","    return (result, totalValue)                      # 칼로리 예산을 넘지 않는 물건 전까지 건너뛰고 그 물건을 추가할 테니까요.\n","                                            #이게 바로 칼로리 예산을 초과하는 물건을 만나자 마자 루프에서 빠져나오면 안되는 이유입니다."],"metadata":{"id":"LsJu3loFtNNN","executionInfo":{"status":"ok","timestamp":1699322753422,"user_tz":-540,"elapsed":9,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["1. 파이썬 정렬 sorted 함수 정리\n","sorted(정렬할 데이터)\n","\n","sorted(정렬할 데이터, reverse 파라미터)\n","\n","sorted(정렬할 데이터, key 파라미터)\n","\n","sorted(정렬할 데이터, key 파라미터, reverse 파라미터)\n","\n","sorted 함수는 파이썬 내장 함수입니다.\n","첫 번째 매개변수로 들어온 이터러블한 데이터를 새로운 정렬된 리스트로 만들어서 반환해 주는 함수입니다.\n","\n","- 첫 번째 매개변수로 들어올 \"정렬할 데이터\"는 iterable 한 데이터 이어야 합니다.\n","\n","아래 옵션(파라미터)은 다 기본값으로 들어가 있기 때문에 sorted(정렬 데이터)만 넣어도 충분합니다.\n","\n","- key 옵션 (key 파라미터)\n","sorted 함수의 key 파라미터는 어떤 것을 기준으로 정렬할 것인가? 에 대한 기준입니다.\n","즉, key 값을 기준으로 비교를 하여 정렬을 하겠다는 것인데, 이것을 정해 줄 수 있는 파라미터입니다.\n","sorted( ~~ , key=뭐뭐)로 입력하게 되면 해당 키를 기준으로 정렬하여 반환합니다.\n","\n","- reverse 옵션 (reverse 파라미터)\n","해당 파라미터를 이용하면 오름차순으로 정렬할지 내림차순으로 정렬할지 정할 수 있습니다.\n","디폴트로는 reverse=False로 오름차순으로 정렬이 됩니다.\n","sorted( ~~ , reverse=True)로 입력하게 되면 내림차순으로 정렬하여 반환합니다.\n","\n","\n","\n","** 리스트.sort()와 sorted(리스트)의 가장 큰 차이는\n","리스트.sort() 는 본체의 리스트를 정렬해서 변환하는 것이고,\n","sorted(리스트) 는 본체 리스트는 내버려두고, 정렬한 새로운 리스트를 반환하는 것입니다."],"metadata":{"id":"INc74JBSrpMm"}},{"cell_type":"code","source":["def greedy(items, maxCost, keyFunction):#그리디 알고리즘 구현\n","    \"\"\"Assumes items a list, maxCost >= 0,\n","         keyFunction maps elements of items to numbers\"\"\"\n","    itemsCopy = sorted(items, key = keyFunction,     #  파이썬에서의 정렬은 nlogn n은 물건의 갯수.\n","                       reverse = True)               #\n","    result = []\n","    totalValue, totalCost = 0.0, 0.0\n","    for i in range(len(itemsCopy)):    #이 루프에서 소요되는 시간은 얼마나 될까요\n","        if (totalCost+itemsCopy[i].getCost()) <= maxCost:  #각 물건마다 한번씩 돌고 전체 물건을 다 돈후 루프를 끝내니\n","            result.append(itemsCopy[i])                  #루프를 총 n번 돕니다. 이것도 nlogn이에요. 괜찮아요.\n","            totalCost += itemsCopy[i].getCost()\n","            totalValue += itemsCopy[i].getValue()\n","    return (result, totalValue)"],"metadata":{"id":"43QA-GmAtXAM","executionInfo":{"status":"ok","timestamp":1699322962534,"user_tz":-540,"elapsed":428,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#테스트입니다. 물건, 제한조건, keyFunction을 입력 받아서 greedy 함수를 호출합니다.\n","#이 경우 제한 조건은 무게겠죠.\n","# 그 다음 현재 가진것을 출력합니다.\n","#testGreedy 함수로 greedy함수를 테스트할 것입니다.\n","def testGreedy(items, constraint, keyFunction):\n","    taken, val = greedy(items, constraint, keyFunction)\n","    print('Total value of items taken =', val)\n","    for item in taken:\n","        print('   ', item)"],"metadata":{"id":"NlxudAfHtip2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#값에 따라 칼로리를 할당하는 그리디 함수를 사용했다고 출력하고\n","#testGreedy(음식, 최대 기준, 음식값)함수를 호출합니다. 음식값으로 Fool.getValue라는 함수를 전달합니다.\n","#그 후 비용에 따라 칼로리를 할당하는 greedy 함수를 사용했다고 출력하는데\n","#이 람다는 무엇일까요? 우리가 원하는 건 비용 그 자체를 입력하는 게 아닙니다\n","#사실 비용의 역수를 원하죠 싼 물건을 먼저 고르고 싶으므로 역순으로 정렬하길 원합니다\n","#싸다는 것은 여기서 칼로리가 적다는 뜻이고 칼로리가 적은 순으로 정렬하길 원합니다.\n","#람다는 이름이 없는 함수입니다. 사용하는 방법은 식별자를 쓰고 : 을 쓴 뒤 원하는 식을 표현합니다.\n","#\n","def testGreedys(maxUnits):\n","    print('Use greedy by value to allocate', maxUnits,\n","          'calories')\n","    testGreedy(foods, maxUnits, Food.getValue)\n","    print('\\nUse greedy by cost to allocate', maxUnits,\n","          'calories')\n","    testGreedy(foods, maxUnits,\n","               lambda x: 1/Food.getCost(x))  #Food는 클래스 이름.\n","    print('\\nUse greedy by density to allocate', maxUnits,\n","          'calories')\n","    testGreedy(foods, maxUnits, Food.density)\n","\n","\n","testGreedys(750)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":364},"id":"N2AdCIRNwaYy","executionInfo":{"status":"error","timestamp":1698719661479,"user_tz":-540,"elapsed":318,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"f4e8ff69-0b90-4d96-c6a9-a48edc322ba8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Use greedy by value to allocate 750 calories\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-6749cfc11e1f>\u001b[0m in \u001b[0;36m<cell line: 22>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mtestGreedys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m750\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-6-6749cfc11e1f>\u001b[0m in \u001b[0;36mtestGreedys\u001b[0;34m(maxUnits)\u001b[0m\n\u001b[1;32m     10\u001b[0m     print('Use greedy by value to allocate', maxUnits,\n\u001b[1;32m     11\u001b[0m           'calories')\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mtestGreedy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfoods\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxUnits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFood\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetValue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     print('\\nUse greedy by cost to allocate', maxUnits,\n\u001b[1;32m     14\u001b[0m           'calories')\n","\u001b[0;31mNameError\u001b[0m: name 'foods' is not defined"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fkIPoGEJsoEC","executionInfo":{"status":"ok","timestamp":1698719667480,"user_tz":-540,"elapsed":16,"user":{"displayName":"심심한백수","userId":"14387771983578606102"}},"outputId":"e86951eb-1cc2-45bf-964b-c84775d359dc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Use greedy by value to allocate 800 calories\n","Total value of items taken = 285.0\n","    burger: <100, 354>\n","    pizza: <95, 258>\n","    beer: <90, 154>\n","\n","Use greedy by cost to allocate 800 calories\n","Total value of items taken = 318.0\n","    apple: <50, 95>\n","    wine: <89, 123>\n","    cola: <79, 150>\n","    beer: <90, 154>\n","    donut: <10, 195>\n","\n","Use greedy by density to allocate 800 calories\n","Total value of items taken = 403.0\n","    wine: <89, 123>\n","    beer: <90, 154>\n","    cola: <79, 150>\n","    apple: <50, 95>\n","    pizza: <95, 258>\n"]}],"source":["#사용하는 예를 보겠습니다.\n","#testGreedys함수가 있고 음식과 최대 단위를 입력 받습니다.\n","#그후 진행 과정에서 세가지 모든 greedy 알고리즘을 테스트합니다.\n","#방금 전에 보았던 메뉴의 음식과 이름들과 가치들을 선택하고, buildMenu함수를 만든 뒤\n","#testGreedy 함수를 호출 합니다.\n","def testGreedys(foods, maxUnits):\n","    print('Use greedy by value to allocate', maxUnits,\n","          'calories')\n","    testGreedy(foods, maxUnits, Food.getValue)\n","    print('\\nUse greedy by cost to allocate', maxUnits,\n","          'calories')\n","    testGreedy(foods, maxUnits,\n","               lambda x: 1/Food.getCost(x))\n","    print('\\nUse greedy by density to allocate', maxUnits,\n","          'calories')\n","    testGreedy(foods, maxUnits, Food.density)\n","\n","\n","names = ['wine', 'beer', 'pizza', 'burger', 'fries',\n","         'cola', 'apple', 'donut', 'cake']\n","values = [89,90,95,100,90,79,50,10]\n","calories = [123,154,258,354,365,150,95,195]\n","foods = buildMenu(names, values, calories)\n","testGreedys(foods, 800)\n"]},{"cell_type":"code","source":["#왜 답이 다를까요\n","#가치에 따라 할당하는 그리디를 사용하자 버거, 피자, 와인 을 택했으며 총 284점의 가치입니다.\n","#여기서 가치는 여러분의 마음입니다.\n","#반면 비용에 따라 할당하는 알고리즘은 총 318점의 가치를 가지며 사과, 와인, 콜라, 맥주, 도넛을 메뉴로 택했습니다.\n","#피자와 버거가 사라졌어요\n","#총 318점의 다른 풀이도 있는데 사과, 와인...앞의 것과 같은 답인데 다른 순서로 나왔습니다.\n","#이 경우는 밀도에 따라 정렬했기 때문이에요.\n","#여기서 탐욕 알고리즘의 중요한점을 볼 수 있습니다.\n","#알고리즘을 사용했지만 다른 답을 얻었다는 점입니다.\n","#왜 다른 답을 얻었을까요?\n","#탐욕 알고리즘의 문제는 각 점에서의 지역 최적해를 선택해 지역 최적 해의 수열을 만들지만\n","#이 수열이 항상 전역 최적 해를 가져다 주는것은 아니라는 것입니다."],"metadata":{"id":"8-kL0wXjuBaa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a=[]"],"metadata":{"id":"MfREk2H0uKr9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a.append((1,2,3,4,5))"],"metadata":{"id":"np8E9KrMomfI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b5YCvd_por60","executionInfo":{"status":"ok","timestamp":1697076466441,"user_tz":-540,"elapsed":3,"user":{"displayName":"­성기혁 | 창의융합교육원(소프트웨어교육위원회) | 조교수 | 한양대(서울)","userId":"08520776177384064284"}},"outputId":"3713d515-2426-4454-d83e-6054301e9a9e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, 2, 3, 4, 5)]"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":[],"metadata":{"id":"NPEuWJIfo85u"},"execution_count":null,"outputs":[]}]}